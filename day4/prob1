#include <stdio.h>

struct employee_t {
    int id;
    float salary;
    char name[250];
    char department[50];
};
typedef struct employee_t employee;

void reademployee(employee emp[], int n);
void displayemployee(employee emp[], int n);
void saveemployee(employee emp[], int n);
void loademployee(employee emp[], int n);
employee findhighestsalaried(employee emp[], int n);

int main() {
    int employeecount;
    printf("Enter number of employees: ");
    scanf("%d", &employeecount);
    employee employees[1000];

    reademployee(employees, employeecount);
    displayemployee(employees, employeecount);
    saveemployee(employees, employeecount);
    loademployee(employees, employeecount);

    employee highestsalaried = findhighestsalaried(employees, employeecount);
    printf("Employee with highest salary: %s, %.2f (%s)\n", highestsalaried.name, highestsalaried.salary, highestsalaried.department);
    
    return 0;
}

void reademployee(employee emp[], int n) {
    printf("Enter the details:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d %s %f %s", &emp[i].id, emp[i].name, &emp[i].salary, emp[i].department);
    }
}

void saveemployee(employee emp[], int n) {
    FILE *file = fopen("employee.txt", "w");
    if (file == NULL) {
        printf("ERROR IN CREATING FILE\n");
        return;
    }
    for (int i = 0; i < n; i++) {
        fprintf(file, "%d %s %.2f %s\n", emp[i].id, emp[i].name, emp[i].salary, emp[i].department);
    }
    fclose(file);
}

void loademployee(employee emp[], int n) {
    FILE *file = fopen("employee.txt", "r");
    if (file == NULL) {
        printf("ERROR IN READING FILE\n");
        return;
    }
    for (int i = 0; i < n; i++) {
        fscanf(file, "%d %s %f %s\n", &emp[i].id, emp[i].name, &emp[i].salary, emp[i].department);
    }
    fclose(file);
}

void displayemployee(employee emp[], int n) {
    printf("Employees:\n");
    for (int i = 0; i < n; i++) {
        printf("%d - %s - %.2f - %s\n", &emp[i].id, emp[i].name, &emp[i].salary, emp[i].department);
    }
}

employee findhighestsalaried(employee emp[], int n) {
    employee maxemployee = emp[0];
    for (int i = 0; i < n; i++) {
        if (emp[i].salary > maxemployee.salary) {
            maxemployee = emp[i];
        }
    }
    return maxemployee;
}

